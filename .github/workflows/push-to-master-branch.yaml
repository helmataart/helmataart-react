# Push to master branch 
name: Push to master branch
on:
  push:
    branches:
      - 'main'
      - 'master'
      - 'feature/*'
env:
  REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
  USERNAME: ${{ vars.DOCKER_HUB_USERNAME }}
  PACKAGE: ${{ vars.PACKAGE_NAME }}      
jobs:
  build:
    name: Build with node version ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20 ]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with: 
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build --if-present
      # - run: npm test
      - run: mkdir staging && cp -a build staging
      - run: cp Dockerfile staging
      - run: cp nginx.conf staging
      - run: tar zcvf artifact.tgz $(find . -name staging -type d)
      - uses: actions/upload-artifact@v3
        with:
          name: Package
          path: artifact.tgz
  create-docker-image:
    name: Create docker image and push to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      docker-image: ${{ steps.meta.outputs.tags }}  
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Package
      - run: tar zxvf ./artifact.tgz
      - name: Login to container repository
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.PACKAGE }}
          tags: |
            type=sha,prefix=,suffix=
      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./staging
          file: ./staging/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}      
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: 
      - create-docker-image
    steps:
      - name: Print tags
        run: | 
          echo "${{ needs.create-docker-image.outputs.docker-image }}"
      - name: Checkout manifests
        uses: actions/checkout@v4
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v4
        with:
          namespace: default
          manifests: |
            manifests/deployment.yaml
            manifests/service.yaml
            manifests/ingress.yaml
          images: |
            ${{ needs.create-docker-image.outputs.docker-image }}